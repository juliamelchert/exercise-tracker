{"ast":null,"code":"var _jsxFileName = \"/Users/juliamelchert/Documents/CS 290/assignment_6 copy/melcherj_react/src/pages/EditExercisePage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const EditExercisePage = _ref => {\n  _s();\n\n  let {\n    exerciseToEdit\n  } = _ref;\n  const [name, setName] = useState(exerciseToEdit.name);\n  const [reps, setReps] = useState(exerciseToEdit.reps);\n  const [weight, setWeight] = useState(exerciseToEdit.weight);\n  const [unit, setUnit] = useState(exerciseToEdit.unit);\n  const [date, setDate] = useState(exerciseToEdit.date);\n  const history = useHistory();\n\n  const editExercise = async () => {\n    const editedExercise = {\n      name,\n      reps,\n      weight,\n      unit,\n      date\n    };\n    const response = await fetch(`/exercises/${exerciseToEdit._id}`, {\n      method: 'PUT',\n      body: JSON.stringify(editedExercise),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.status === 200) {\n      alert(\"Successfully edited the exercise.\");\n    } else {\n      alert(`Failed to edit the exercise, status code = ${response.status}`);\n    }\n\n    history.push(\"/\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"heading\",\n      children: \"Edit Exercise\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: name,\n      onChange: e => setName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: reps,\n      onChange: e => setReps(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: weight,\n      onChange: e => setWeight(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      value: unit,\n      onChange: e => setUnit(e.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"kgs\",\n        children: \"kgs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"lbs\",\n        children: \"lbs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: date,\n      onChange: e => setDate(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: editExercise,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditExercisePage, \"zrg9PVNNGWpndaWAJb7hAPncdoY=\", false, function () {\n  return [useHistory];\n});\n\n_c = EditExercisePage;\nexport default EditExercisePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditExercisePage\");","map":{"version":3,"sources":["/Users/juliamelchert/Documents/CS 290/assignment_6 copy/melcherj_react/src/pages/EditExercisePage.js"],"names":["React","useState","useHistory","EditExercisePage","exerciseToEdit","name","setName","reps","setReps","weight","setWeight","unit","setUnit","date","setDate","history","editExercise","editedExercise","response","fetch","_id","method","body","JSON","stringify","headers","status","alert","push","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory } from \"react-router-dom\";\n\nexport const EditExercisePage = ({ exerciseToEdit }) => {\n\n    const [name, setName] = useState(exerciseToEdit.name);\n    const [reps, setReps] = useState(exerciseToEdit.reps);\n    const [weight, setWeight] = useState(exerciseToEdit.weight);\n    const [unit, setUnit] = useState(exerciseToEdit.unit);\n    const [date, setDate] = useState(exerciseToEdit.date);\n\n    const history = useHistory()\n\n    const editExercise = async () => {\n        const editedExercise = {name, reps, weight, unit, date};\n        const response = await fetch(`/exercises/${exerciseToEdit._id}`, {\n            method: 'PUT',\n            body: JSON.stringify(editedExercise),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        });\n        if (response.status === 200) {\n            alert(\"Successfully edited the exercise.\");\n        } else {\n            alert(`Failed to edit the exercise, status code = ${response.status}`)\n        }\n        history.push(\"/\");\n    };\n\n    return (\n        <div>\n            <h1 className=\"heading\">Edit Exercise</h1>\n            <input\n                type=\"text\"\n                value={name}\n                onChange={e => setName(e.target.value)} />\n            <input\n                type=\"number\"\n                value={reps}\n                onChange={e => setReps(e.target.value)} />\n            <input\n                type=\"number\"\n                value={weight}\n                onChange={e => setWeight(e.target.value)} />\n            <select value={unit} onChange={e => setUnit(e.target.value)}> \n                <option value=\"kgs\">kgs</option>\n                <option value=\"lbs\">lbs</option>\n            </select>\n            <input \n                type=\"text\" \n                value={date} \n                onChange={e => setDate(e.target.value)} />\n            <button\n                onClick={editExercise}\n            >Save</button>\n        </div>\n    );\n}\n\nexport default EditExercisePage;"]},"metadata":{},"sourceType":"module"}